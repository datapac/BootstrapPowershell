# Requires -Version 5.1

# Bootstrap Powershell Core Functions

# Log to terminal and audit log file
function Write-Log {
    param(
        [string]$Message,
        [string]$Level = "INFO"
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $script:colorMap = @{
            "INFO" = "White"
            "SUCCESS" = "Green" 
            "WARNING" = "Magenta"
            "ERROR" = "DarkRed"
            "DEBUG" = "Cyan"
    }
    
    $Message = "[$timestamp] [$Level] $Message"

    #Define audit log file if not already defined name PowershellBootstrap.txt in current directory
    if (-not $logPath) {
        $logPath = Join-Path (Get-Location).Path "PowershellBootstrap.log"
    }

    # Output to console and log file
    Write-Host "$Message" -ForegroundColor $colorMap[$Level]
    "$Message" | Out-File -FilePath $logPath -Append
}

function Write-Info {
    param([string]$Message)
    Write-Log -Message $Message -Level "INFO"
}
function Write-Success {
    param([string]$Message)
    Write-Log -Message $Message -Level "SUCCESS"
}
function Write-Warning {
    param([string]$Message)
    Write-Log -Message $Message -Level "WARNING"
}
function Write-ErrorMsg {
    param([string]$Message)
    Write-Log -Message $Message -Level "ERROR"
}


# Install git on Windows code generated by ChatGPT 23Aug25
function Install-GitOnWindows {

    try {

        # Force TLS 1.2
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

        # Query GitHub API for the latest release
        $latestRelease = Invoke-WebRequest -Uri "https://api.github.com/repos/git-for-windows/git/releases/latest" -UseBasicParsing
        $releaseInfo = $latestRelease | ConvertFrom-Json

        # Look for the 64-bit installer (exclude portable and debug builds)
        $installerAsset = $releaseInfo.assets |
            Where-Object { $_.name -match '^Git-.*-64-bit\.exe$' -and $_.name -notmatch 'Portable' } |
            Select-Object -First 1

        if (-not $installerAsset) {
            Write-ErrorMsg "Could not locate the Git 64-bit installer in the latest release."
            Write-Info "Available assets:" ($releaseInfo.assets | ForEach-Object { $_.name }) -Separator "`n"
            exit 1
        }

        $installerUrl = $installerAsset.browser_download_url
        $installerName = $installerAsset.name

        Write-Info "Downloading Git installer: $(Join-Path (Get-Location).Path $installerName)"
        Invoke-WebRequest -Uri $installerUrl -OutFile $installerName -UseBasicParsing

        Write-Info "Installing Git silently..."
        Start-Process -FilePath $(Join-Path (Get-Location).Path $installerName) -ArgumentList "/SILENT","/NORESTART" -Wait -NoNewWindow

        Write-Info "Cleaning up installer file..."
        Remove-Item -Path $installerName -Force
    
        # Refresh path to make git available
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        Write-Info "New system PATH=$envPath"

        # Test to see if git is now available
        git --version | Out-File -FilePath $logPath -Append

        # Ensure GIT Identity values for name and email are set
        Validate-GitIdentity


    } catch {
        Write-ErrorMsg "Install-GitOnWindows() aborted; $($_Exception.Message)"
        Exit 1
    }
}


function Validate-GitIdentity {
    
    try {
        # Get current git values
        $userName = git config --global user.name
        $userEmail = git config --global user.email

        Write-Info "Git says user.name=$userName user.email=$userEmail"

        # Define config values if necessary
        if (-not $userName -or -not $userEmail) {
            
            $userName  = Read-Host "Enter your GIT user.name (e.g. 'FirstName LastName')"
            $userEmail = Read-Host "Enter your GIT user.email "
            
            Write-Info "Validate-GitIdentity() Setting GIT user.name and user.email"
            git config --global user.name "$userName" | Out-File -FilePath $logPath -Append
            git config --global user.email "$userEmail" | Out-File -FilePath $logPath -Append

            $userName  = git config --global user.name
            $userEmail = git config --global user.email

            Write-Info "Git now says user.name=$userName user.email=$userEmail"

        }
    } catch {
        Write-ErrorMsg "Validate-GitIdentity() aborted; $($_Exception.Message)"
    }
}


# Use GIT CLONE to download my shared Powershell scripts from $repoLink to folder $repoPath
# My shared Powershell scripts link = 'https://github.com/Datapac/Powershell.git'
function GitCloneRepoOnWindows
{
    param (
        [string]$repoLink,
        [string]$repoPath
    )

    try {    

        Write-Info "Begin GitCloneRepoOnWindows($repoLink, $repoPath)..."
    
        # Ensure $repoPath folder exists, create if necessary
        New-Item -Path $repoPath -ItemType Directory -Force | Out-Null

        Set-Location $repoPath

        Write-Info "FYI: Enter LOCAL MACHINE keychain/admin password if requested by git-credential... (twice???)"

        # Ensure GIT Identity has been defined
        #git config --global user.name "Your Name"
        #git config --global user.email "you@example.com"
        Validate-GitIdentity

        # Write Git output (and any errors) to my audit log file
        # FYI: 2> = redirect stderr (stream 2)
        #      &1 = to wherever stdout (stream 1) is going
        # git clone "$repoLink" >> $logPath 2>&1
        $ErrorActionPreference = 'SilentlyContinue'
        git clone "$repoLink" 2>&1 | Add-Content -Path $logPath
        $ErrorActionPreference = 'Continue'  # Reset to default

    } catch {

        Write-ErrorMsg "GitCloneRepoOnWindows() aborted; $($_Exception.Message)"
        Exit 1

    }
}   

function Install-PowerShell7 {

    param (
        [string]$powershellDownloadUrl
    )

    $installer = Join-Path -Path $env:TEMP -ChildPath "PowerShell-7.5.2-win-x64.msi"

    Write-Info "Downloading PowerShell MSI from $powershellDownloadUrl..."
    try {
        Invoke-WebRequest -Uri $powershellDownloadUrl -OutFile $installer
        Write-Info "Download completed."
    } catch {
        Write-ErrorMsg "Failed to download PowerShell MSI: $_" "ERROR"
        return
    }

    Write-Info "Starting silent installation of PowerShell..."
    $arguments = @(
        "/package", "`"$installer`"",
        "/quiet",
        "ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1",
        "ADD_FILE_CONTEXT_MENU_RUNPOWERSHELL=1",
        "ENABLE_PSREMOTING=1",
        "REGISTER_MANIFEST=1",
        "USE_MU=1",
        "ENABLE_MU=1",
        "ADD_PATH=1"
    )

    try {
        Start-Process -FilePath "msiexec.exe" -ArgumentList $arguments -Wait -NoNewWindow
        Write-Info "PowerShell installed successfully."
    } catch {
        Write-ErrorMsg "Installation failed: $_" "ERROR"
    }
}
